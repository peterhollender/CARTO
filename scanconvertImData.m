function imDataSC = scanconvertImData(imData,axLimitsMm,gridSpacingMm);
fields = fieldnames(imData);
imDataSC = struct;
if ~exist('gridSpacingMm','var')
    gridSpacingMm = 0.1;
end
if ~exist('axLimitsMm','var')
    axLimitsMm = 'auto';
end
for fieldIdx = 1:length(fields);
        im = imData.(fields{fieldIdx});
        if strcmpi(axLimitsMm,'auto');
            axLimits = [...
                sind(min(im.theta))*(max(im.axial)-im.apex) ...
                sind(max(im.theta))*(max(im.axial)-im.apex) ...
                0 ...
                (max(im.axial))];    
        else
            axLimits = axLimitsMm;
        end
        scanconvertOpts = struct(...
            'latmin',axLimits(1)*1e-3,... %1e-3*sind(min(im.theta))*(max(im.axial)-im.apex),...  1e-2*sin(min(btheta))*par.imagingdepth,...
            'latmax',axLimits(2)*1e-3,... %1e-3.*sind(max(im.theta))*(max(im.axial)-im.apex),... 1e-2*sin(max(btheta))*par.imagingdepth,...
            'latinc',gridSpacingMm*1e-3,...
            'axialmin',axLimits(3)*1e-3,...-1e-3*im.apex,...
            'axialmax',axLimits(4)*1e-3, ...1e-3*(max(im.axial)) - 1e-3*im.apex,...
            'axialinc',gridSpacingMm*1e-3,...
            'min_phi',min(im.theta),...
            'span_phi',max(im.theta)-min(im.theta),...
            'apex',0.1*im.apex,...
            'fsiq',770/mean(diff(im.axial))*1e3...
            );
        
        [cData z x] = Scan_Convert_Sector(im.cData,scanconvertOpts);
        [alphadata z x] = Scan_Convert_Sector(im.alphadata,scanconvertOpts);        
        imDataSC.(fields{fieldIdx}) = rmfield(im,{'theta','axial','apex'});
        imDataSC.(fields{fieldIdx}).cData = cData;
        imDataSC.(fields{fieldIdx}).alphadata = alphadata;
        imDataSC.(fields{fieldIdx}).axial = z;
        imDataSC.(fields{fieldIdx}).lat = x;
        
end
